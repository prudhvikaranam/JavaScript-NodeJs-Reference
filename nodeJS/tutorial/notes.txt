// ---------------------------------------------***********************Tips

---------------------------------------------------------------------------------------------------------------------
Top level code gets executed only oncright in the beginning or at the time of execution,
Only the call back functions which are related will get executed every time when a new request is made



---------------------------------------------------------------------------------------------------------------------
****** fs.readFileSync("./txt/input.txt", "utf-8");// here . (dot) actually refers to the current folder from which we are running the node command from terminal
 ****** __dirname is where the current file located


example :
//if you try running the file with below code from desktop you will be able to get output successfully, because __dirname provides access to the entire path of the file
 const textRead = fs.readFileSync(`${__dirname}/txt/input.txt`, "utf-8"); ///////////////////////code////////////////////

// where as below code will throw an error if you are trying to run the file from desktop because . represents that you are searching for the file in desktop
const textRead = fs.readFileSync("./txt/input.txt", "utf-8");  ///////////////////////code////////////////////

But while importing module in require('./), . means where the file is located it gets an exception of the above . rule. (so we can use . in require and it does not impact anything even after running from a different locations)

// If we want to go back one directory using the __dirname, we need to make use of path like below
// For example, we are in some other upfront (like eventloop folder) directory and want to use the input file which is in the backward (main... txt) directory then we have to use below way in the file which is in eventloop folder.
// const path = require('path');
// console.log(`${path.join(__dirname,'../txt/input.txt')}`);

---------------------------------------------------------------------------------------------------------------------
res.writeHead(200, {content-type : 'application/json'}) is used to send the response headers to the client