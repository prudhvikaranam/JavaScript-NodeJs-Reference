// ---------------------------------------------***********************Tips

console.log(require('module').wrapper); // Shows the wrapper function of every module, this is for DEMO purpose only

Calculator = () => {}
module.exports = Calculator;
console.log(arguments); // might be helpful to see the details like path, export etc


---------------------------------------------------------------------------------------------------------------------
Top level code gets executed only once and right in the beginning or at the time of execution,
Only the call back functions which are related will get executed every time when a new request is made



---------------------------------------------------------------------------------------------------------------------
****** fs.readFileSync("./txt/input.txt", "utf-8");// here . (dot) actually refers to the current folder from which we are running the node command from terminal
 ****** __dirname is where the current file located


example :
//if you try running the file with below code from desktop you will be able to get output successfully, because __dirname provides access to the entire path of the file
 const textRead = fs.readFileSync(`${__dirname}/txt/input.txt`, "utf-8"); ///////////////////////code////////////////////

// where as below code will throw an error if you are trying to run the file from desktop because . represents that you are searching for the file in desktop
const textRead = fs.readFileSync("./txt/input.txt", "utf-8");  ///////////////////////code////////////////////

But while importing module in require('./), . means where the file is located it gets an exception of the above . rule. (so we can use . in require and it does not impact anything even after running from a different locations)

// If we want to go back one directory using the __dirname, we need to make use of path like below
// For example, we are in some other upfront (like eventloop folder) directory and want to use the input file which is in the backward (main... txt) directory then we have to use below way in the file which is in eventloop folder.
// const path = require('path');
// console.log(`${path.join(__dirname,'../txt/input.txt')}`);

---------------------------------------------------------------------------------------------------------------------
res.writeHead(200, {content-type : 'application/json'}) is used to send the response headers to the client





-------------------------------------------------------Increase Thread pool size--------------------------------------------------------------

process.env.UV_THREADPOOL_SIZE = number(example : 10);


-------------------------------------------Difference between module.exports and exports

**** use module.exports to export single variable e.g: a single class or a single function
ex: 

module1.js:
class Calculator {
   add() {

   }
   multiply () {

   }
}
module.exports = Calculator;
while importing one way is the below
const C = require(./module1.js)
const calc1 = new C();
calc1.add(a,b);




**** use exports to export multiple named variables
ex: exports.add = (a,b) => a+b; or
    exports.multiply = (a,b) => a*b;


-- ---------------------------------------Difference between Default and named export.

**** Default Export : A default export allows us to export a single value or function as the default export of a module.

ex: 
module.js
const message = 'Hello, World!';
export default message;

import message from './module.js';
console.log(message); // Output: Hello, World!


**** Named Export : A named export allows us to export multiple values or functions from a module.
ex: 
module.js
export function add(a, b) {
   return a + b;
}
export function subtract(a, b) {
   return a - b;
}

import { add, subtract } from './module.js';
console.log(add(2, 3)); // Output: 5
console.log(subtract(5, 2)); // Output: 3




-- --------------------------------------- Middleware.

app.use(express.json)

Here is the explanation that should clear doubts on express.json() and express.urlencoded() and the use of body-parser. It took me some time to figure this out.

What is Middleware? It is those methods/functions/operations that are called BETWEEN processing the Request and sending the Response in your application method.

When talking about express.json() and express.urlencoded() think specifically about POST requests (i.e. the .post request object) and PUT Requests (i.e. the .put request object)

You DO NOT NEED express.json() and express.urlencoded() for GET Requests or DELETE Requests.

You NEED express.json() and express.urlencoded() for POST and PUT requests, because in both these requests you are sending data (in the form of some data object) to the server and you are asking the server to accept or store that data (object), which is enclosed in the body (i.e. req.body) of that (POST or PUT) Request

Express provides you with middleware to deal with the (incoming) data (object) in the body of the request.

a. express.json() is a method inbuilt in express to recognize the incoming Request Object as a JSON Object. This method is called as a middleware in your application using the code: app.use(express.json());

b. express.urlencoded() is a method inbuilt in express to recognize the incoming Request Object as strings or arrays. This method is called as a middleware in your application using the code: app.use(express.urlencoded());

ALTERNATIVELY, I recommend using body-parser (it is an NPM package) to do the same thing. It is developed by the same peeps who built express and is designed to work with express. body-parser used to be part of express. Think of body-parser specifically for POST Requests (i.e. the .post request object) and/or PUT Requests (i.e. the .put request object).