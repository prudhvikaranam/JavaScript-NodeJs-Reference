// ******************************************************* Event loop is a C program that orchestrates or co-ordinates the execution of synchronous and asynchronous code in Node Js






// ---------------------------------- Event loop flow of Microtasks queue starts here------------------------------------------------
// First priority is given to process queue once all CB's are done in there then queue is entered into Promise and once all are done in there and if there are any pending tasks in process queue then it again triggers those CB's if there are no then exists the loop
// Callbacks in the microtask queue are executed before the Timer, I/O and setImmediate queues and they (microtask callbacks) also interupt and run in between the same/other queue Callbacks.

// See image processNextTick.png in folder to check pros and cons

Promise.resolve().then(() => {
    console.log('promise resolve 1');
})

Promise.resolve().then(() => {
    console.log('promise resolve 2');
    process.nextTick(() => {
        console.log('process next tick inside Promise resolve 2');
    })
})

Promise.resolve().then(() => {
    console.log('promise resolve 3');
})

process.nextTick(() => {
    console.log('process next tick 1');
    Promise.resolve().then(() => {
        console.log('promise resolve inside nexttick 1');
    })
})

process.nextTick(() => {
    console.log('process next tick 2');
    process.nextTick(() => {
        console.log('process next tick innerr 2');
        process.nextTick(() => {
            console.log('process next tick innerr innerr 2');
        })
    })
})

process.nextTick(() => {
    console.log('process next tick 3');
    process.nextTick(() => {
        console.log('process next tick innerr 3');
        process.nextTick(() => {
            console.log('process next tick innerr innerr 3');
        })
    })
});

setImmediate(() => {
    Promise.resolve().then(() => {
        console.log('promise resolve inside timeout');
    })
});


console.log('Outside and synchronous code');



// ---------------------------------- Event loop flow of Microtasks queue ends here------------------------------------------------





// ---------------------------------- Event loop flow of Timers starts here------------------------------------------------

// Before Timer, I/O and immeddiate queues....process.nextTick and promise queue's take priority.
// Also CB's in the microtask queue are executed in between the execution of callbacks in timer queue. (After execution of every callback in the timer queue the event loop goes back and checks the microtask queue, if there are any it will execute them else event loop will continue executing the call back in the Timer queue)

// process.nextTick(() => {
//     console.log('Process Tick 1');
// })

// process.nextTick(() => {
//     console.log('process next tick 2');
//     process.nextTick(() => {
//         console.log('process next tick inside nexttick 2');
//     })
// })

// Promise.resolve().then(() => {
//     console.log('promise resolve 1');
// })


// Promise.resolve().then(() => {
//     console.log('promise resolve 2');
//     Promise.resolve().then(() => {
//         console.log('promise inside promise resolve 2');
//     })
// })

// setTimeout(() => {
//     console.log('Timer 1');
// }, 0)


// setTimeout(() => {
//     console.log('Timer 2');
//     process.nextTick(() => {
//         console.log('Process Tick inside timer 2'); // This will be executed before the next setTimeout because CB's in the microtask queue are executed in between the execution of callbacks in timer queue.
//     })
//     Promise.resolve().then(() => {
//         console.log('promise resolve inside Timer 2'); // This will be executed before the next setTimeout because CB's in the microtask queue are executed in between the execution of callbacks in timer queue.
//     })
// }, 0)

// setTimeout(() => {
//     console.log('Timer 4');
//     process.nextTick(() => {
//         console.log('Process Tick inside timer 4');
//     })
// }, 0)

// setTimeout(() => {
//     console.log('Timer 3');
//     process.nextTick(() => {
//         console.log('Process Tick inside timer 3');
//     })
// }, 0)



// -------- example showing that microtask callback are executed inbetween setTimeout callbacks itself;

// setTimeout(() => {
//     console.log('Timer 1');
//     process.nextTick(() => {
//         console.log('Process Tick inside timer 1');
//     })
// }, 0)


// setTimeout(() => {
//     console.log('Timer 2');

// }, 100)


// setTimeout(() => {
//     console.log('Timer 3');
//     Promise.resolve().then(() => {
//         console.log(`Promise inside set timeout 3`);
//     })
// }, 300)

// setTimeout(() => {
//     console.log('Timer 4');
// }, 300)


// ---------------------------------- Event loop flow of Timers ends here------------------------------------------------







// ---------------------------------- Event loop flow of I/O and setImmediate starts here------------------------------------------------
// If we are trying access callbacks insider settimer with 0 milliseconds and I/O callback and also with setImmediate, we cannot gurantee the order of the execution of the callbacks, that is because even though we gave 0 millisecond in the background, JS (background with C++ code) calculates that 0 milliseconds with max (something like max(0)) and it might sometime becomes 1 millisecond or even 0 millisecond and based on this values I/O queue might trigger inbetween (Depending on the max(0) given time) and programatically I/O processing depends on the CPU usage, Hence we can gurantee the order in this case.


// In the below example, we expect setImmediate should be called after I/O queue (i.e., fs callback), but setImmediate is called before I/P queue, that is because "I/O events are polled and callback functions are added to the I/O queue only after the I/O is complete". if we add setImmediate inside fs then that setImmediate will be called after fs only because by the time it is triggered I/O is completed and it follows the flow.

// const fs = require('fs');
// const path = require('path');

// fs.readFile(`${path.join(__dirname, '../txt/input.txt')}`, "utf-8", (err, data) => {
//     console.log('File read 1');
//     setImmediate(() => { console.log('Set immediate 6 inside FS read') });

//     Promise.resolve().then(() => {
//         console.log('promise resolve 1 inside FS');
//     })

//     process.nextTick(() => {
//         console.log('process next tick 1 inside FS');
//     });
// })


// setTimeout(() => {
//     console.log('Timer 1');
// }, 0)

// Promise.resolve().then(() => {
//     console.log('promise resolve 1');
//     // process.nextTick(() => {
//     //     console.log('process inside promise resolve 1');
//     // });
// })

// process.nextTick(() => {
//     console.log('process next tick 1');
//     // process.nextTick(() => {
//     //     console.log('process inside tick 1');
//     // });
//     // Promise.resolve().then(() => {
//     //     console.log('promise insider process next 1');
//     // })
// });

// setImmediate(() => { console.log('Set immediate 1') });
// setImmediate(() => { console.log('Set immediate 2') });
// setImmediate(() => { console.log('Set immediate 3') });
// setImmediate(() => { console.log('Set immediate 4') });
// setImmediate(() => { console.log('Set immediate 5') });






// -----------------------SetImmediate example starts here (example showing that microtask callback are executed inbetween setTimeout callbacks itself;)

// setImmediate(() => { console.log('Set immediate 1') });
// setImmediate(() => {
//     console.log('Set immediate 2')
//     process.nextTick(() => { console.log(`process next tick inside set immediate`)});
//     Promise.resolve().then(() => {
//         console.log(`Promise callback inside set immediate`);
//     })
// });
// setImmediate(() => { console.log('Set immediate 3') });


// -----------------------SetImmediate example ends here


// ---------------------------------- Event loop flow of I/O and setImmediate ends here------------------------------------------------






// ---------------------------------- Close queue starts here ------------------------------------------------



// ---------------------------------- Close queue ends here ------------------------------------------------
