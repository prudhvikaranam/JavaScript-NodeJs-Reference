Mongo DB 

--------------------------------------------Terminologies starts here-------------------------------------

Collections
Collections in Mongo are equivalent to tables in relational databases. They can hold multiple JSON documents.

Documents
Documents are equivalent to records or rows of data in SQL. While a SQL row can reference data in other tables, Mongo documents usually combine that in a document.

Fields
Fields, also known as properties or attributes, are similar to columns in a SQL table. In the image above, FirstName, LastName, Email, and Phone are all fields.

Schema
While Mongo is schema-less, SQL defines a schema via the table definition. A Mongoose schema is a document data structure (or shape of the document) that is enforced via the application layer.

SchemaTypes
While Mongoose schemas define the overall structure or shape of a document, SchemaTypes define the expected data type for individual fields (String, Number, Boolean, and so on).

You can also pass in useful options like required to make a field non-optional, default to set a default value for the field, and many more.

Models
Models are higher-order constructors that take a schema and create an instance of a document equivalent to records in a relational database.



Example
Here's a small code snippet to illustrate some of the terminology above:

const puppySchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  age: Number
});

const Puppy = mongoose.model('Puppy', puppySchema);
In the code above, puppySchema defines the shape of the document which has two fields, name, and age.

The SchemaType for name is String and for age is Number. Note that you can define the SchemaType for a field by using an object with a type property like with name. Or you can apply a SchemaType directly to the field like with age.

Also, notice that the SchemaType for name has the option required set to true. To use options like required and lowercase for a field, you need to use an object to set the SchemaType.

At the bottom of the snippet, puppySchema is compiled into a model named Puppy, which can then be used to construct documents in an application.




A Mongo DB can have one or more collections and each collection can have one or more documents to hold the data...


--------------------------------------------Terminologies ends here-------------------------------------


https://www.mongodb.com/docs/manual/reference/method/db.collection.insert/
use --->  to switch to a db, if there is no db with that name it will create and will switch to that.


--------------------------------------------Creating and Querying the data-------------------------------------

-> show dbs

-> use natours-test (This creates and switch to natours-test db).

-> show collections

////////////////////----Insert condition


-> db.collectionName.insertOne({'Country' : 'India','name' : 'John Doe'});

-> db.collectionName.insertMany([{'Country' : 'India','name' : 'Ramu'},{'Country' : 'America','name' : 'John Doe'}])


////////////////////----Find condition

-> db.collectionName.find() // to see the data

-> db.collectionName.find({'name' : 'Ramu'}) // to see any specific data

-> db.collectionName.find({
        price  : {$lte : 500 }
    }) // prices less than or equal to 500, ($lt -> less than)


////////////////////----AND condition

-> db.collectionName.find({ 
        price  : {$lte : 500 }, 
        rating : {$gte : 4.8} 
    }) // checks for both conditions (Similar to AND).

    db.tester.find({'country' : 'Canada','rating' : {$lt : '4.2'}});


////////////////////----OR condition

-> db.collectionName.find({
    $or : [
            { objectKey : value }, 
            { objectKey : value }
          ]
    }) // OR condition

    db.tester.find(
        {
            $or : [
                {
                    'country' : 'Canada'
                },
                {
                    'rating' : {$gt : '4.3'}
                }
            ]
        }
    )

////////////////////----Projection

-> db.collectionName.find({
    $or : [
            { objectKey : value }, 
            { objectKey : value }
          ]
    }, {name : 1} ) // Here we are using projections that means we are trying queries to filter the data and only want to show name from that filtered data. 
    
    db.tester.find(
        {
            $or : [
                {
                    'country' : 'Canada'
                },
                {
                    'rating' : {$gt : '4.3'}
                }
            ]
        },
        {
            'country' : '1',
            'name' : '1'
        }
    )



--------------------------------------------Updating the data-------------------------------------

-> db.tester.updateOne(
        {filter/search options}, 
        {$set : {
            data which should be updated
        }
    })

-> db.tester.updateOne({'name' : 'Rajuu'}, {$set : {'name' : 'Raju', 'rating' : '5.0'}})

->    db.tester.updateMany(
        {
            'country' : 'Canadaa'
        },
        {
            $set : {
                'country' : 'Canada'
            }
        }
    )

-> db.tester.deleteOne({condition goes here});
-> db.tester.deleteMany({condition goes here});
-> db.tester.deleteMany({}) ---> This will delete all the records in the collection





--------------------------------------------Connecting to Mongo DB here-------------------------------------

To establish a connection between Mongo DB and Node JS we make use of Mongoose Library.

const mongoose = require('mongoose');

const DB = mongodb+srv://<USERNAME goes here>:<PASSWORD goes here>@cluster0.osvbzf0.mongodb.net/<Data BASE name goes here>retryWrites=true

mongoose.connect(DB).then((data) => {
    console.log('DB connected');
}).catch((err) => {
    console.log(`Error`,err);
})


To create and insert a new record we need to use the "model" and "schema" concepts of Mongo, below is how it looks

const schema = new mongoose.Schema({
    name : {
        type : String,
        required : true
        // For other properties check go through the official document
    },
    age : Number
})

const modelName = mongoose.model('collectionName',schema); // Model is like a Class in Javascript where make use of model (as a blue print) and create new instances by creating records like below

const newRecord = new modelName({
    name : ''Ramu',
    age : 20
})

newRecord.save();

In the above example we configured the database name in the url and the collection name in the model (collectionName).